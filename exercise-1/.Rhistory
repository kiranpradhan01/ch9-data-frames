# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employee <- paste("Employee",seq(1:100))
employee
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- v(runif(40000,50000))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(100,40000,50000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
init_salaries <- runif(100,40000,50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
change_salary <-
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
change_salary <- runif(100,-5000,10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employee,init_salaries,change_salary)
View(salaries)
View(salaries)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
init_salaries <- round(runif(100,40000,50000),0)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
change_salary <- round(runif(100,-5000,10000),0)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employee,init_salaries,change_salary)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
new_salary <- init_salaries + round(runif(100,-5000,10000),0)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employee,init_salaries,new_salary)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
init_salary <- round(runif(100,40000,50000),0)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
new_salary <- init_salary + round(runif(100,-5000,10000),0)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employee,init_salary,new_salary)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- new_salary - init_salary
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries(change > 0)
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
# What was the 2018 salary of employee 57
salaries[salaries$employee = "Employee 57", new_salary]
# What was the 2018 salary of employee 57
salaries[salaries$employee == "Employee 57", new_salary]
# What was the 2018 salary of employee 57
salaries[salaries$employee == "Employee 57", "new_salary"]
# How many employees got a raise?
length(salaries$got_raise == "TRUE")
# How many employees got a raise?
nrow(salaries$got_raise == "TRUE")
# How many employees got a raise?
nrow(salaries[salaries$got_raise == "TRUE",])
# What was the dollar value of the highest raise?
salaries[max(salaries$change)]
# What was the dollar value of the highest raise?
max(salaries$change)
# What was the "name" of the employee who received the highest raise?
salaries[,max(salaries$change)]
# What was the "name" of the employee who received the highest raise?
salaries[max(salaries$change),"employee"]
# What was the "name" of the employee who received the highest raise?
salaries[max(salaries$change),"employee"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$change == "9966","employee"]
# What was the largest decrease in salaries between the two years?
min(salaries$change)
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$change == min(salaries$change),"employee"]
# What was the average salary change?
mean(salaries$change)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$change < 0)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$change[salaries$change < 0])
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
##  yes, their values are near each other
# Write a .csv file of your salary data to your working directory
write.csv(salaries,"salaries.csv")
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
##  yes, their values are near each other
# Write a .csv file of your salary data to your working directory
write.csv(salaries,'salaries.csv')
?data
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame("USPersonalExpenditure")
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
us_p_e <- data.frame("USPersonalExpenditure")
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
us_p_e <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(USPersonalExpenditure)
# What are the row names of your dataframe?
rownames(USPersonalExpenditure)
# Add a column "category" to your data frame that contains the rownames
us_p_e$category(rownames)
# Add a column "category" to your data frame that contains the rownames
us_p_e$category <- rownames(us_p_e)
View(us_p_e)
View(us_p_e)
# How much money was spent on personal care in 1940?
us_p_e[us_p_e$category = "Personal Care"]
# How much money was spent on personal care in 1940?
us_p_e["Personal Care","X1940"]
# How much money was spent on Food and Tobacco in 1960?
us_p_e["Food and Tobacco", "X1960"]
# What was the highest expenditure category in 1960?
us_p_e[us_p_e$category, max(X1960)]
# What was the highest expenditure category in 1960?
us_p_e[us_p_e$category, max("X1960")]
# What was the highest expenditure category in 1960?
max(us_p_e[us_p_e$category, "X1960"]
# What was the highest expenditure category in 1960?
max(us_p_e[us_p_e$category, "X1960"]
# What was the highest expenditure category in 1960?
max(us_p_e$category[max(us_p_e$category)]
# What was the highest expenditure category in 1960?
max(us_p_e$category[max(us_p_e$category)]
# What was the highest expenditure category in 1960?
## REVIEW NOTATION
us_p_e$category[us_p_e$category == max(us_p_e$category)]
# What was the highest expenditure category in 1960?
## REVIEW NOTATION
us_p_e$category[us_p_e$X1960 == max(us_p_e$X1960)]
us_p_e$category[us_p_e$col_name == min(us_p_e$col_name)]
us_p_e$category[us_p_e[,col_name] == min(us_p_e[,col_name])
}
us_p_e$category[us_p_e[,col_name] == min(us_p_e[,col_name])
}
us_p_e$category(us_p_e[,col_name] == min(us_p_e[,col_name])
}
us_p_e$category(us_p_e[,col_name] == min(us_p_e[,col_name])
}
us_p_e$category[us_p_e[,col_name] == min(us_p_e[,col_name])]
?sapply
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940,1960,5),lowest_category)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
col_name <- paste(X,year)
us_p_e$category[us_p_e[,col_name] == min(us_p_e[,col_name])]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940,1960,5),lowest_category)
col_name <- paste("X",year)
us_p_e$category[us_p_e[,col_name] == min(us_p_e[,col_name])]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
col_name <- paste("X",year)
us_p_e$category[us_p_e[,col_name] == min(us_p_e[,col_name])]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940,1960,5),lowest_category)
